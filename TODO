Check what branch I'm on before committing...

1. In mem cache for certifications


For user favs:
1. Create a PATCH handler for the 'seen' + 'description' fields
1. XXX OK. XXX
2. FE side decide how to handle empty description since "" is falsy, maybe just " "
3. GET route for retrieving all of one user's favs
3. XXX OK. XXX

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EXTRAs:
1. Having an option for the user to download the entire list of favs. for backup as well
2. Admin view! For checking dupes. Secured of course
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


sequelizeCLI:
https://medium.com/@andrewoons/how-to-define-sequelize-associations-using-migrations-de4333bf75a7

with sequelize-cli we can create a model/migration, which creates a index.js that will export the entire db object!
We can just import that wherever we need it.
Just remember to do a sequelize db:migrate the first time.


```
    const db = require("../../../models")
    
  await db.User.create({firstName: 'AAA', email: 'email@test.com', passwordDigest: 'asdasda'})
  await db.UserFavourite.create({movieRefId: 2243,movieTitle: "adasd",userId: 2,moviePosterPath:"asdada"})
  await db.UserFavourite.create({movieRefId: 22343,movieTitle: "aASDASDdasd",userId: 3,moviePosterPath:"aDGARREFEEFsdada"})
  const usQ = await db.User.findByPk(1)
  const usFav = await usQ.getUserFavourites()
```

```
With the below we include also the user's favourites films.
    const user = await db.User.findByPk(15, {
      include: [{ model: db.UserFavourite }],
    });
```
